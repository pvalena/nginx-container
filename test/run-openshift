#!/bin/bash
#
# Test the Nginx image in OpenShift.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#

THISDIR=$(dirname ${BASH_SOURCE[0]})

source ${THISDIR}/test-lib-openshift.sh

set -exo nounset

function check_nginx_os_service_connection() {
  local util_image_name="${1}" ; shift
  local service_name="${1}" ; shift
  local timeout="${1:-60}" ; shift || :
  local pod_ip=$(ct_os_get_service_ip ${service_name})

  : "  Service ${service_name} check ..."

  local cmd="curl -s 172.0.0.1:8080 | grep Welcome | tr -s '\n' ' '"
  local expected_value='^ <title>Welcome to OpenShift</title> <h1>Welcome to your static nginx application on OpenShift</h1> $'
  local output
  local ret
  SECONDS=0

  echo -n "Waiting for ${service_name} service becoming ready ..."
  while true ; do
    output=$(docker run -ti --rm ${util_image_name} bash -c "${cmd}" || :)
    echo "${output}" | grep -qe "${expected_value}" && ret=0 || ret=1
    if [ ${ret} -eq 0 ] ; then
      echo " PASS"
      return 0
    fi
    echo -n "."
    [ ${SECONDS} -gt ${timeout} ] && break
    sleep 3
  done
  echo " FAIL"
  return 1
}

function test_nginx_pure_image() {
  local image_name=${1}
  local image_name_no_namespace=${image_name##*/}
  local service_name=${image_name_no_namespace}

  [[ -z "${image_name}" ]] && exit 1

  ct_os_new_project
  ct_os_upload_image "${image_name}"

  ct_os_deploy_pure_image "${image_name}"

  ct_os_wait_pod_ready "${service_name}" 60
  check_nginx_os_service_connection "${image_name}" "${service_name}"

  ct_os_delete_project
}

function test_mysql_template() {
  local image_name=${1}
  local image_name_no_namespace=${image_name##*/}
  local service_name=${image_name_no_namespace}

  [[ -z "${image_name}" ]] && exit 1

  ct_os_new_project
  ct_os_upload_image "${image_name}"

  ct_os_deploy_template_image ${THISDIR}/mariadb-ephemeral-template.json \
                              DATABASE_SERVICE_NAME="${service_name}" \
                              DATABASE_IMAGE="${image_name_no_namespace}" \
                              MYSQL_USER=testu \
                              MYSQL_PASSWORD=testp \
                              MYSQL_DATABASE=testdb

  ct_os_wait_pod_ready "${service_name}" 60
  check_nginx_os_service_connection "${image_name}" "${service_name}" testu testp

  ct_os_delete_project
}

function test_mysql_s2i() {
  local image_name=${1:-centos/mariadb-101-centos7}
  local app=${2:-https://github.com/sclorg/mariadb-container.git}
  local context_dir=${3:-test/test-app}
  local image_name_no_namespace=${image_name##*/}
  local service_name=${image_name_no_namespace}

  ct_os_new_project
  ct_os_upload_image "${image_name}"

  ct_os_deploy_s2i_image "${image_name_no_namespace}" "${app}" \
                          --context-dir="${context_dir}" \
                          --name "${service_name}" \
                          --env MYSQL_ROOT_PASSWORD=test \
                          --env MYSQL_OPERATIONS_USER=testo \
                          --env MYSQL_OPERATIONS_PASSWORD=testo \
                          --env MYSQL_DATABASE=testopdb \
                          --env MYSQL_USER=testnormal \
                          --env MYSQL_PASSWORD=testnormal

  ct_os_wait_pod_ready "${service_name}" 60
  check_mysql_os_service_connection "${image_name}" "${service_name}" testo testo

  ct_os_delete_project
}

ct_os_install_in_centos
ct_os_cluster_up
test_mysql_pure_image ${IMAGE_NAME}
test_mysql_template ${IMAGE_NAME}
test_mysql_s2i ${IMAGE_NAME} "https://github.com/hhorak/mariadb-container.git#s2i-support-3" test/test-app


